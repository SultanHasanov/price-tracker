const { Telegraf, Markup, session } = require('telegraf');
const axios = require('axios');
const cron = require('node-cron');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_KEY = "XGXVQZX24QKQ3YGL";
const API_BASE = "https://api.moneyplace.io";
const MOCK_API_BASE = "https://e957a177cfe4e411.mokky.dev";
const BOT_TOKEN = process.env.BOT_TOKEN || '8190479365:AAHnjDWn6sr_8SF6Cj_jw7HR2-Cu1fM_syA';

// –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
const INTERVALS = {
    '10 —Å–µ–∫—É–Ω–¥': 10,
    '20 —Å–µ–∫—É–Ω–¥': 20,
    '50 —Å–µ–∫—É–Ω–¥': 50,
    '1 —á–∞—Å': 3600,
    '2 —á–∞—Å–∞': 7200,
    '5 —á–∞—Å–æ–≤': 18000,
    '10 —á–∞—Å–æ–≤': 36000,
    '12 —á–∞—Å–æ–≤': 43200
};

// –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã
const MARKETPLACES = {
    'wildberries': 'Wildberries',
    'ozon': 'Ozon'
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π
const activeTrackings = new Map();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// Middleware –¥–ª—è —Å–µ—Å—Å–∏–π
bot.use(session());

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Mock API
async function getUserTrackings(userId) {
    try {
        const response = await axios.get(`${MOCK_API_BASE}/trackings`);
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ user_id –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ, —Ç–∞–∫ –∫–∞–∫ Mock API –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å query params
        return response.data.filter(tracking => tracking.user_id == userId);
    } catch (error) {
        console.error('Mock API Error (get):', error.message);
        return [];
    }
}

async function saveUserTracking(trackingData) {
    try {
        const response = await axios.post(`${MOCK_API_BASE}/trackings`, trackingData);
        return response.data;
    } catch (error) {
        console.error('Mock API Error (post):', error.message);
        // –ï—Å–ª–∏ POST –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π ID
        return { ...trackingData, id: Date.now().toString() };
    }
}

async function updateUserTracking(trackingId, updates) {
    try {
        // –î–ª—è Mock API –∏—Å–ø–æ–ª—å–∑—É–µ–º PUT –≤–º–µ—Å—Ç–æ PATCH, —Ç–∞–∫ –∫–∞–∫ PATCH –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è
        const response = await axios.put(`${MOCK_API_BASE}/trackings/${trackingId}`, updates);
        return response.data;
    } catch (error) {
        console.error('Mock API Error (update):', error.message);
        // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
        return updates;
    }
}

async function deleteUserTracking(trackingId) {
    try {
        await axios.delete(`${MOCK_API_BASE}/trackings/${trackingId}`);
        return true;
    } catch (error) {
        console.error('Mock API Error (delete):', error.message);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
async function makeApiRequest(params) {
    try {
        const response = await axios.get(`${API_BASE}/v1/product`, {
            params: {
                'q[sku][equal]': params.article,
                'q[mp][equal]': params.marketplace,
                expand: 'category,seller,brand'
            },
            headers: {
                'Authorization': `Token ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        return response.data;
    } catch (error) {
        console.error('API Error:', error.message);
        throw new Error(`–û—à–∏–±–∫–∞ API: ${error.message}`);
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
function formatPrice(price) {
    if (!price) return '0 ‚ÇΩ';
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB',
        minimumFractionDigits: 0
    }).format(price);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
async function trackPrice(ctx, trackingData) {
    const { article, marketplace, interval, notifyOnlyOnChange, chatId, id: trackingId } = trackingData;
    
    try {
        const data = await makeApiRequest({ article, marketplace });
        
        if (data && data.length > 0) {
            const product = data[0];
            const currentPrice = product.real_price;
            const previousPrice = trackingData.lastPrice;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Ü–µ–Ω–∞
            const priceChanged = previousPrice !== null && currentPrice !== previousPrice;
            
            if (!notifyOnlyOnChange || priceChanged || previousPrice === null) {
                const message = `
üìä <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã</b>
üõçÔ∏è <b>–¢–æ–≤–∞—Ä:</b> ${product.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üì¶ <b>–ê—Ä—Ç–∏–∫—É–ª:</b> ${article}
üè™ <b>–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:</b> ${MARKETPLACES[marketplace]}
üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> ${formatPrice(currentPrice)}
${previousPrice !== null ? `üìà <b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞:</b> ${formatPrice(previousPrice)}` : ''}
${priceChanged ? `üö® <b>–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å!</b>` : ''}
‚è∞ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> ${Object.keys(INTERVALS).find(key => INTERVALS[key] === interval)}
                `;
                
                await ctx.telegram.sendMessage(chatId, message, { 
                    parse_mode: 'HTML',
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ', `stop_one_${trackingId}`)],
                        [Markup.button.callback('‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', `pause_${trackingId}`),
                         Markup.button.callback('‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å', `resume_${trackingId}`)]
                    ])
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
            trackingData.lastPrice = currentPrice;
            
            // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –≤ Mock API, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫
            try {
                await updateUserTracking(trackingId, { lastPrice: currentPrice });
            } catch (apiError) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –≤ API, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            activeTrackings.set(trackingId, trackingData);
        }
    } catch (error) {
        console.error('Tracking error:', error);
        await ctx.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏: ${error.message}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–∫–µ—Ä–æ–≤
async function showTrackersList(ctx, trackings) {
    if (trackings.length === 0) {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π.');
        return;
    }
    
    let message = 'üìã <b>–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:</b>\n\n';
    
    for (const tracking of trackings) {
        const status = tracking.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' : '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
        message += `üÜî <b>ID:</b> ${tracking.id || 'N/A'}\n`;
        message += `üõçÔ∏è <b>–ê—Ä—Ç–∏–∫—É–ª:</b> ${tracking.article}\n`;
        message += `üè™ <b>–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:</b> ${MARKETPLACES[tracking.marketplace]}\n`;
        message += `üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> ${formatPrice(tracking.lastPrice || 0)}\n`;
        message += `‚è∞ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> ${Object.keys(INTERVALS).find(k => INTERVALS[k] === tracking.interval) || tracking.interval}\n`;
        message += `üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> ${tracking.notifyOnlyOnChange ? '–¢–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏' : '–í—Å–µ–≥–¥–∞'}\n`;
        message += `üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${status}\n`;
        message += '‚îÄ'.repeat(20) + '\n';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ', 'stop_all')],
        [Markup.button.callback('‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ', 'pause_all'),
         Markup.button.callback('‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ', 'resume_all')],
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', 'refresh_list')]
    ]);
    
    await ctx.reply(message, { parse_mode: 'HTML', ...keyboard });
}

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
bot.start(async (ctx) => {
    await ctx.reply(
        `üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!\n\n–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö.`,
        Markup.keyboard([
            ['üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É'],
            ['üìã –ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è', 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ']
        ]).resize()
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.hears('üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É', async (ctx) => {
    ctx.session = { step: 'enter_article' };
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:');
});

bot.hears('üìã –ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è', async (ctx) => {
    const userId = ctx.from.id;
    const trackings = await getUserTrackings(userId);
    await showTrackersList(ctx, trackings);
});

bot.hears('üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ', async (ctx) => {
    const userId = ctx.from.id;
    const trackings = await getUserTrackings(userId);
    
    if (trackings.length === 0) {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π.');
        return;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–µ—Ä—ã
    let stoppedCount = 0;
    for (const tracking of trackings) {
        if (activeTrackings.has(tracking.id)) {
            const trackingData = activeTrackings.get(tracking.id);
            clearInterval(trackingData.intervalId);
            activeTrackings.delete(tracking.id);
            stoppedCount++;
        }
        try {
            await updateUserTracking(tracking.id, { isActive: false });
        } catch (error) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ API –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞:', tracking.id);
        }
    }
    
    await ctx.reply(`‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${stoppedCount} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π.`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
bot.on('text', async (ctx) => {
    if (ctx.session?.step === 'enter_article') {
        ctx.session.article = ctx.message.text;
        ctx.session.step = 'choose_marketplace';
        
        await ctx.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:',
            Markup.keyboard([
                [MARKETPLACES.wildberries, MARKETPLACES.ozon]
            ]).resize()
        );
    } else if (ctx.session?.step === 'choose_marketplace') {
        const marketplaceName = ctx.message.text;
        const marketplaceKey = Object.keys(MARKETPLACES).find(key => 
            MARKETPLACES[key] === marketplaceName
        );
        
        if (marketplaceKey) {
            ctx.session.marketplace = marketplaceKey;
            ctx.session.step = 'choose_interval';
            
            await ctx.reply(
                '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:',
                Markup.keyboard([
                    ['10 —Å–µ–∫—É–Ω–¥', '20 —Å–µ–∫—É–Ω–¥', '50 —Å–µ–∫—É–Ω–¥'],
                    ['1 —á–∞—Å', '2 —á–∞—Å–∞', '5 —á–∞—Å–æ–≤'],
                    ['10 —á–∞—Å–æ–≤', '12 —á–∞—Å–æ–≤']
                ]).resize()
            );
        } else {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.');
        }
    } else if (ctx.session?.step === 'choose_interval') {
        const intervalName = ctx.message.text;
        const interval = INTERVALS[intervalName];
        
        if (interval) {
            ctx.session.interval = interval;
            ctx.session.intervalName = intervalName;
            ctx.session.step = 'choose_notification_mode';
            
            await ctx.reply(
                '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:',
                Markup.keyboard([
                    ['–¢–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏', '–í—Å–µ–≥–¥–∞']
                ]).resize()
            );
        } else {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.');
        }
    } else if (ctx.session?.step === 'choose_notification_mode') {
        const mode = ctx.message.text;
        const notifyOnlyOnChange = mode === '–¢–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏';
        
        ctx.session.notifyOnlyOnChange = notifyOnlyOnChange;
        ctx.session.step = 'confirm_tracking';
        
        await ctx.reply(
            `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n\n` +
            `üì¶ –ê—Ä—Ç–∏–∫—É–ª: ${ctx.session.article}\n` +
            `üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: ${MARKETPLACES[ctx.session.marketplace]}\n` +
            `‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${ctx.session.intervalName}\n` +
            `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${mode}\n\n` +
            `–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ?`,
            Markup.keyboard([
                ['‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å', '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å']
            ]).resize()
        );
    } else if (ctx.session?.step === 'confirm_tracking') {
        if (ctx.message.text === '‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å') {
            const { article, marketplace, interval, intervalName, notifyOnlyOnChange } = ctx.session;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä–∞
            const trackingData = {
                user_id: ctx.from.id,
                article,
                marketplace,
                interval,
                intervalName,
                notifyOnlyOnChange,
                chatId: ctx.chat.id,
                lastPrice: null,
                isActive: true,
                createdAt: new Date().toISOString()
            };
            
            let savedTracking;
            try {
                savedTracking = await saveUserTracking(trackingData);
            } catch (error) {
                // –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π ID
                savedTracking = { ...trackingData, id: Date.now().toString() };
            }
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            const trackingWithId = { ...savedTracking, intervalId: null };
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            await trackPrice(ctx, trackingWithId);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            const intervalMs = interval * 1000;
            trackingWithId.intervalId = setInterval(async () => {
                await trackPrice(ctx, trackingWithId);
            }, intervalMs);
            
            activeTrackings.set(savedTracking.id, trackingWithId);
            
            await ctx.reply(
                '‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.',
                Markup.keyboard([
                    ['üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É'],
                    ['üìã –ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è', 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ']
                ]).resize()
            );
        } else {
            await ctx.reply(
                '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
                Markup.keyboard([
                    ['üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É'],
                    ['üìã –ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è', 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ']
                ]).resize()
            );
        }
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        ctx.session = {};
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
bot.action(/stop_one_(.+)/, async (ctx) => {
    const trackingId = ctx.match[1];
    
    try {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        if (activeTrackings.has(trackingId)) {
            const tracking = activeTrackings.get(trackingId);
            clearInterval(tracking.intervalId);
            activeTrackings.delete(trackingId);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Mock API
        try {
            await updateUserTracking(trackingId, { isActive: false });
        } catch (error) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ API');
        }
        
        await ctx.answerCbQuery('‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        await ctx.editMessageText(`üõë –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.`);
    } catch (error) {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è');
    }
});

bot.action(/pause_(.+)/, async (ctx) => {
    const trackingId = ctx.match[1];
    
    try {
        // –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        if (activeTrackings.has(trackingId)) {
            const tracking = activeTrackings.get(trackingId);
            clearInterval(tracking.intervalId);
            activeTrackings.delete(trackingId);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Mock API
        try {
            await updateUserTracking(trackingId, { isActive: false });
        } catch (error) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ API');
        }
        
        await ctx.answerCbQuery('‚è∏Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        await ctx.editMessageText(`‚è∏Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.`);
    } catch (error) {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è');
    }
});

bot.action(/resume_(.+)/, async (ctx) => {
    const trackingId = ctx.match[1];
    const userId = ctx.from.id;
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Mock API –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        let trackingData;
        try {
            const trackings = await getUserTrackings(userId);
            trackingData = trackings.find(t => t.id == trackingId);
        } catch (error) {
            // –ï—Å–ª–∏ API –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏—â–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–∫–µ—Ä–∞—Ö
            trackingData = Array.from(activeTrackings.values())
                .find(t => t.id == trackingId && t.user_id == userId);
        }
        
        if (trackingData) {
            // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
            const intervalMs = trackingData.interval * 1000;
            trackingData.intervalId = setInterval(async () => {
                await trackPrice(ctx, trackingData);
            }, intervalMs);
            
            activeTrackings.set(trackingId, trackingData);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Mock API
            try {
                await updateUserTracking(trackingId, { isActive: true });
            } catch (error) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ API');
            }
            
            await ctx.answerCbQuery('‚ñ∂Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ');
            await ctx.editMessageText(`‚ñ∂Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ.`);
        } else {
            await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ');
        }
    } catch (error) {
        console.error('Resume error:', error);
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è');
    }
});

bot.action('stop_all', async (ctx) => {
    const userId = ctx.from.id;
    
    try {
        const trackings = await getUserTrackings(userId);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–µ—Ä—ã
        let stoppedCount = 0;
        for (const tracking of trackings) {
            if (activeTrackings.has(tracking.id)) {
                const trackingData = activeTrackings.get(tracking.id);
                clearInterval(trackingData.intervalId);
                activeTrackings.delete(tracking.id);
                stoppedCount++;
            }
            try {
                await updateUserTracking(tracking.id, { isActive: false });
            } catch (error) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ API –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞:', tracking.id);
            }
        }
        
        await ctx.answerCbQuery(`‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${stoppedCount} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π`);
        await ctx.editMessageText(`‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${stoppedCount} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π.`);
    } catch (error) {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π');
    }
});

bot.action('pause_all', async (ctx) => {
    const userId = ctx.from.id;
    
    try {
        const trackings = await getUserTrackings(userId);
        
        // –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–µ—Ä—ã
        let pausedCount = 0;
        for (const tracking of trackings) {
            if (activeTrackings.has(tracking.id)) {
                const trackingData = activeTrackings.get(tracking.id);
                clearInterval(trackingData.intervalId);
                activeTrackings.delete(tracking.id);
                pausedCount++;
            }
            try {
                await updateUserTracking(tracking.id, { isActive: false });
            } catch (error) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ API –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞:', tracking.id);
            }
        }
        
        await ctx.answerCbQuery(`‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${pausedCount} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π`);
        await ctx.editMessageText(`‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${pausedCount} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π.`);
    } catch (error) {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π');
    }
});

bot.action('resume_all', async (ctx) => {
    const userId = ctx.from.id;
    
    try {
        const trackings = await getUserTrackings(userId);
        
        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç—Ä–µ–∫–µ—Ä—ã
        let resumedCount = 0;
        for (const tracking of trackings) {
            if (!tracking.isActive) {
                const intervalMs = tracking.interval * 1000;
                tracking.intervalId = setInterval(async () => {
                    await trackPrice(ctx, tracking);
                }, intervalMs);
                
                activeTrackings.set(tracking.id, tracking);
                resumedCount++;
                
                try {
                    await updateUserTracking(tracking.id, { isActive: true });
                } catch (error) {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ API –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞:', tracking.id);
                }
            }
        }
        
        await ctx.answerCbQuery(`‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ ${resumedCount} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π`);
        await ctx.editMessageText(`‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ ${resumedCount} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π.`);
    } catch (error) {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π');
    }
});

bot.action('refresh_list', async (ctx) => {
    const userId = ctx.from.id;
    try {
        const trackings = await getUserTrackings(userId);
        await ctx.deleteMessage();
        await showTrackersList(ctx, trackings);
    } catch (error) {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error(`Error for ${ctx.updateType}:`, err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
    console.log('Starting price tracking bot...');
    await bot.launch();
    console.log('Bot started successfully!');
}

// Graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –ó–∞–ø—É—Å–∫
startBot().catch(console.error);