const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const BOT_TOKEN = "8353683466:AAGXDOv_OjBs5BIdITVuAmF71sFoe2We29I"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const API_KEY = "XGXVQZX24QKQ3YGL";
const API_BASE = "https://api.moneyplace.io";
const MOKKY_API = "https://e957a177cfe4e411.mokky.dev";

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const trackingTasks = new Map(); // –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
const userStates = new Map(); // FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
const MARKETPLACES = {
  wildberries: {
    name: "Wildberries",
    emoji: "üü£",
  },
  ozon: {
    name: "Ozon",
    emoji: "üîµ",
  },
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤
const PERIODS = {
  "10s": { seconds: 10, name: "10 —Å–µ–∫—É–Ω–¥" },
  "20s": { seconds: 20, name: "20 —Å–µ–∫—É–Ω–¥" },
  "50s": { seconds: 50, name: "50 —Å–µ–∫—É–Ω–¥" },
  "1h": { seconds: 3600, name: "1 —á–∞—Å" },
  "2h": { seconds: 7200, name: "2 —á–∞—Å–∞" },
  "5h": { seconds: 18000, name: "5 —á–∞—Å–æ–≤" },
  "10h": { seconds: 36000, name: "10 —á–∞—Å–æ–≤" },
  "12h": { seconds: 43200, name: "12 —á–∞—Å–æ–≤" },
};

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const STATES = {
  IDLE: "idle",
  WAITING_ARTICLE: "waiting_article",
  SELECTING_MARKETPLACE: "selecting_marketplace",
  SELECTING_PERIOD: "selecting_period",
  SELECTING_NOTIFICATION: "selecting_notification",
  EDITING_PERIOD: "editing_period",
  EDITING_NOTIFY: "editing_notify", // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ
};

// –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
class TrackingTask {
  constructor(userId, article, marketplace, periodSeconds, notifyAlways) {
    this.userId = userId;
    this.article = article;
    this.marketplace = marketplace;
    this.periodSeconds = periodSeconds;
    this.notifyAlways = notifyAlways;
    this.lastPrice = null;
    this.lastCheck = null;
    this.active = true;
    this.productName = "";
    this.createdAt = new Date();
    this.updatedAt = new Date();
  }
}

// API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Mokky
class MokkyAPI {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async getUserTrackings(userId) {
    try {
      const response = await axios.get(
        `${MOKKY_API}/trackings?userId=${userId}`
      );
      return response.data || [];
    } catch (error) {
      console.error("Error getting user trackings:", error.message);
      return [];
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
  static async createTracking(trackingData) {
    try {
      const response = await axios.post(`${MOKKY_API}/trackings`, trackingData);
      return response.data;
    } catch (error) {
      console.error("Error creating tracking:", error.message);
      return null;
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
  static async updateTracking(id, updateData) {
    try {
      const response = await axios.patch(
        `${MOKKY_API}/trackings/${id}`,
        updateData
      );
      return response.data;
    } catch (error) {
      console.error("Error updating tracking:", error.message);
      return null;
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
  static async deleteTracking(id) {
    try {
      await axios.delete(`${MOKKY_API}/trackings/${id}`);
      return true;
    } catch (error) {
      console.error("Error deleting tracking:", error.message);
      return false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ ID
  static async getTracking(id) {
    try {
      const response = await axios.get(`${MOKKY_API}/trackings/${id}`);
      return response.data;
    } catch (error) {
      console.error("Error getting tracking:", error.message);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
  static async getAllActiveTrackings() {
    try {
      const response = await axios.get(`${MOKKY_API}/trackings?active=true`);
      return response.data || [];
    } catch (error) {
      console.error("Error getting active trackings:", error.message);
      return [];
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async saveUserState(userId, state) {
    try {
      const response = await axios.get(
        `${MOKKY_API}/userStates?userId=${userId}`
      );
      const existingStates = response.data || [];

      if (existingStates.length > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await axios.patch(`${MOKKY_API}/userStates/${existingStates[0].id}`, {
          state: state,
          updatedAt: new Date().toISOString(),
        });
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await axios.post(`${MOKKY_API}/userStates`, {
          userId: userId,
          state: state,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        });
      }
    } catch (error) {
      console.error("Error saving user state:", error.message);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async getUserState(userId) {
    try {
      const response = await axios.get(
        `${MOKKY_API}/userStates?userId=${userId}`
      );
      const states = response.data || [];
      return states.length > 0 ? states[0].state : { state: STATES.IDLE };
    } catch (error) {
      console.error("Error getting user state:", error.message);
      return { state: STATES.IDLE };
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API —Ç–æ–≤–∞—Ä–æ–≤
async function makeApiRequest(article, marketplace) {
  try {
    const params = new URLSearchParams({
      "q[sku][equal]": article,
      "q[mp][equal]": marketplace,
      expand: "category,seller,brand",
    });

    const response = await axios.get(`${API_BASE}/v1/product?${params}`, {
      headers: {
        Authorization: `Token ${API_KEY}`,
        "Content-Type": "application/json",
      },
    });

    if (response.data && response.data.length > 0) {
      return response.data[0];
    }
    return null;
  } catch (error) {
    console.error("API Error:", error.message);
    return null;
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
function formatPrice(price) {
  return new Intl.NumberFormat("ru-RU", {
    style: "currency",
    currency: "RUB",
    minimumFractionDigits: 0,
  }).format(price);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
function formatNumber(num) {
  return new Intl.NumberFormat("ru-RU").format(num);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
function formatProductInfo(product) {
  const marketplaceInfo = MARKETPLACES[product.mp] || {
    name: "Unknown",
    emoji: "‚ùì",
  };

  let text = `${marketplaceInfo.emoji} **${
    product.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"
  }**\n\n`;
  text += `üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: ${marketplaceInfo.name}\n`;
  text += `üì¶ –ê—Ä—Ç–∏–∫—É–ª: \`${product.sku || "N/A"}\`\n`;
  text += `üí∞ –¶–µ–Ω–∞: **${formatPrice(product.real_price || 0)}**\n`;

  if (product.discount > 0) {
    text += `üî• –°–∫–∏–¥–∫–∞: ${product.discount}%\n`;
    text += `üí∏ –¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏: ~~${formatPrice(
      product.price_with_discount || 0
    )}~~\n`;
  }

  text += `üìä –ù–∞–ª–∏—á–∏–µ: ${product.amount || 0}\n`;

  if (product.rate) {
    text += `‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${product.rate}\n`;
  }

  if (product.comments_count) {
    text += `üí¨ –û—Ç–∑—ã–≤—ã: ${formatNumber(product.comments_count)}\n`;
  }

  text += `üïí –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${new Date().toLocaleString("ru-RU")}`;

  return text;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function getStartKeyboard() {
  return {
    inline_keyboard: [
      [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", callback_data: "add_tracking" }],
      [{ text: "üìã –ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data: "list_tracking" }],
      [
        { text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "statistics" },
        { text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data: "settings" },
      ],
      [{ text: "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä", url: "https://t.me/search_wb_ozon_bot" }], // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
      [{ text: "‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data: "help" }],
    ],
  };
}

function getMainReplyKeyboard() {
  return {
    keyboard: [
      ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üìã –ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"],
      ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä"],
      ["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
    ],
    resize_keyboard: true,
    one_time_keyboard: false,
  };
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è–º–∏
function getTrackingManagementKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data: "start_all" },
        { text: "‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ", callback_data: "stop_all" },
      ],
      [
        { text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ", callback_data: "delete_inactive" },
        { text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data: "delete_all" },
      ],
      [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_main" }],
    ],
  };
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
function getMarketplaceKeyboard() {
  const keyboard = [];
  for (const [key, value] of Object.entries(MARKETPLACES)) {
    keyboard.push([
      { text: `${value.emoji} ${value.name}`, callback_data: `mp_${key}` },
    ]);
  }
  keyboard.push([{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]);

  return { inline_keyboard: keyboard };
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
function getPeriodKeyboard() {
  const keyboard = [];
  const periods = Object.entries(PERIODS);

  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
  for (let i = 0; i < periods.length; i += 2) {
    const row = [];
    row.push({
      text: `‚è±Ô∏è ${periods[i][1].name}`,
      callback_data: `period_${periods[i][0]}`,
    });
    if (periods[i + 1]) {
      row.push({
        text: `‚è±Ô∏è ${periods[i + 1][1].name}`,
        callback_data: `period_${periods[i + 1][0]}`,
      });
    }
    keyboard.push(row);
  }

  keyboard.push([{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]);

  return { inline_keyboard: keyboard };
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function getNotificationKeyboard() {
  return {
    inline_keyboard: [
      [
        {
          text: "üîî –¢–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã",
          callback_data: "notify_changes",
        },
      ],
      [{ text: "üì¢ –í—Å–µ–≥–¥–∞ —É–≤–µ–¥–æ–º–ª—è—Ç—å", callback_data: "notify_always" }],
      [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
    ],
  };
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π
async function getTrackingListKeyboard(userId) {
  const keyboard = [];
  const userTrackings = await MokkyAPI.getUserTrackings(userId);

  for (const tracking of userTrackings) {
    const mpEmoji = MARKETPLACES[tracking.marketplace]?.emoji || "‚ùì";
    const status = tracking.active ? "üü¢" : "üî¥";
    const displayText = `${status} ${mpEmoji} ${tracking.article.substring(
      0,
      15
    )}...`;
    keyboard.push([
      {
        text: displayText,
        callback_data: `task_info_${tracking.id}`,
      },
    ]);
  }

  if (userTrackings.length === 0) {
    keyboard.push([{ text: "üì≠ –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π", callback_data: "no_tasks" }]);
  } else {
    keyboard.push([
      { text: "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data: "manage_trackings" },
    ]);
  }

  keyboard.push([{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_main" }]);

  return { inline_keyboard: keyboard };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π
function getTaskActionsKeyboard(trackingId, isActive) {
  const keyboard = [];

  if (isActive) {
    keyboard.push([
      { text: "‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data: `stop_${trackingId}` },
    ]);
  } else {
    keyboard.push([
      { text: "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data: `start_${trackingId}` },
    ]);
  }

  keyboard.push([
    { text: "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data: `check_${trackingId}` },
    { text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data: `edit_period_${trackingId}` },
  ]);

  keyboard.push([
    {
      text: "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
      callback_data: `edit_notify_${trackingId}`,
    },
    { text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data: `delete_${trackingId}` },
  ]);

  keyboard.push([{ text: "üîô –ö —Å–ø–∏—Å–∫—É", callback_data: "list_tracking" }]);

  return { inline_keyboard: keyboard };
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
function getSettingsKeyboard() {
  return {
    inline_keyboard: [
      [{ text: "üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data: "export_data" }],
      [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_main" }],
    ],
  };
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π –∏–∑ Mokky –≤ –∫—ç—à
async function loadTrackingsToCache() {
  try {
    const allTrackings = await MokkyAPI.getAllActiveTrackings();
    trackingTasks.clear();

    for (const tracking of allTrackings) {
      const task = new TrackingTask(
        tracking.userId,
        tracking.article,
        tracking.marketplace,
        tracking.periodSeconds,
        tracking.notifyAlways
      );
      task.lastPrice = tracking.lastPrice;
      task.lastCheck = tracking.lastCheck ? new Date(tracking.lastCheck) : null;
      task.active = tracking.active;
      task.productName = tracking.productName || "";

      const taskKey = `${tracking.userId}_${tracking.article}_${tracking.marketplace}`;
      trackingTasks.set(taskKey, { ...task, mokkyId: tracking.id });
    }

    console.log(`Loaded ${allTrackings.length} trackings to cache`);
  } catch (error) {
    console.error("Error loading trackings to cache:", error.message);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const firstName = msg.from.first_name || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  await MokkyAPI.saveUserState(userId, { state: STATES.IDLE });

  const text = `ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName}, –≤ –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω!**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö Wildberries –∏ Ozon.

**‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π
‚Ä¢ ‚öôÔ∏è –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ üì± –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
‚Ä¢ üíæ –ù–∞–¥–µ–∂–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ üìà –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
‚Ä¢ ‚è∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
‚Ä¢ üîî –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ üìã –ú–∞—Å—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

  await bot.sendMessage(chatId, text, {
    parse_mode: "Markdown",
    reply_markup: getMainReplyKeyboard(),
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
  await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
    reply_markup: getStartKeyboard(),
  });
  try {
    await axios.post("https://c2e30b93457050ae.mokky.dev/users-price", {
      id: msg.from.id,
      name: msg.from.first_name || null,
    });
    console.log(`User ${msg.from.id} saved to mock API`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err.message);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on("callback_query", async (callbackQuery) => {
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;

  try {
    await bot.answerCallbackQuery(callbackQuery.id);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    if (data === "add_tracking") {
      await bot.editMessageText(
        "üì¶ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è**\n\n–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:\n\nüí° –ù–µ –∑–Ω–∞–µ—Ç–µ –∞—Ä—Ç–∏–∫—É–ª? –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–æ—Ç–æ–º –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ - –Ω–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞!",
        {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä",
                  url: "https://t.me/search_wb_ozon_bot",
                },
              ],
              [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
            ],
          },
        }
      );
      await MokkyAPI.saveUserState(userId, { state: STATES.WAITING_ARTICLE });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
    else if (data.startsWith("edit_period_")) {
      const trackingId = data.replace("edit_period_", "");
      const tracking = await MokkyAPI.getTracking(trackingId);

      if (!tracking) {
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
        });
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await MokkyAPI.saveUserState(userId, {
        state: "editing_period",
        trackingId: trackingId,
      });

      const mpInfo = MARKETPLACES[tracking.marketplace];
      await bot.editMessageText(
        `üì¶ –¢–æ–≤–∞—Ä: ${tracking.productName}\nüè™ ${mpInfo.emoji} ${mpInfo.name}\n\n‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏:`,
        {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: "Markdown",
          reply_markup: getPeriodKeyboard(),
        }
      );
    }

    // –í—ã–±–æ—Ä –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
    else if (data.startsWith("mp_")) {
      const marketplace = data.replace("mp_", "");
      const userState = await MokkyAPI.getUserState(userId);
      userState.marketplace = marketplace;
      userState.state = STATES.SELECTING_PERIOD;
      await MokkyAPI.saveUserState(userId, userState);

      const mpInfo = MARKETPLACES[marketplace];
      await bot.editMessageText(
        `üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: ${mpInfo.emoji} ${mpInfo.name}\n\n‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏:`,
        {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: "Markdown",
          reply_markup: getPeriodKeyboard(),
        }
      );
    }

    // –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
    else if (data.startsWith("period_")) {
      const periodKey = data.replace("period_", "");
      const periodInfo = PERIODS[periodKey];
      const userState = await MokkyAPI.getUserState(userId);

      // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      if (userState.state === "editing_period" && userState.trackingId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        await MokkyAPI.updateTracking(userState.trackingId, {
          periodSeconds: periodInfo.seconds,
          updatedAt: new Date().toISOString(),
        });

        await bot.editMessageText(`‚úÖ –ü–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${periodInfo.name}`, {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: "Markdown",
          reply_markup: getStartKeyboard(),
        });

        await MokkyAPI.saveUserState(userId, { state: STATES.IDLE });
        return;
      }

      // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      userState.period = periodKey;
      userState.periodSeconds = periodInfo.seconds;
      userState.state = STATES.SELECTING_NOTIFICATION;
      await MokkyAPI.saveUserState(userId, userState);

      await bot.editMessageText(
        `‚è±Ô∏è –ü–µ—Ä–∏–æ–¥: ${periodInfo.name}\n\nüîî –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:`,
        {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: "Markdown",
          reply_markup: getNotificationKeyboard(),
        }
      );
    }

    // –í—ã–±–æ—Ä —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    else if (data === "notify_changes" || data === "notify_always") {
      const notifyAlways = data === "notify_always";
      const userState = await MokkyAPI.getUserState(userId);

      // –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      if (userState.state === STATES.EDITING_NOTIFY && userState.trackingId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await MokkyAPI.updateTracking(userState.trackingId, {
          notifyAlways: notifyAlways,
          updatedAt: new Date().toISOString(),
        });

        const notifyText = notifyAlways
          ? "–≤—Å–µ–≥–¥–∞"
          : "—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã";

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        const updatedTracking = await MokkyAPI.getTracking(
          userState.trackingId
        );
        if (updatedTracking) {
          const mpInfo = MARKETPLACES[updatedTracking.marketplace];
          const periodName =
            Object.values(PERIODS).find(
              (p) => p.seconds === updatedTracking.periodSeconds
            )?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
          const status = updatedTracking.active
            ? "üü¢ –ê–∫—Ç–∏–≤–Ω–æ"
            : "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ";

          let infoText = `‚úÖ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**\n\n`;
          infoText += `üì¶ –¢–æ–≤–∞—Ä: ${updatedTracking.productName}\n`;
          infoText += `üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: ${mpInfo.emoji} ${mpInfo.name}\n`;
          infoText += `üìã –ê—Ä—Ç–∏–∫—É–ª: \`${updatedTracking.article}\`\n`;
          infoText += `‚è±Ô∏è –ü–µ—Ä–∏–æ–¥: ${periodName}\n`;
          infoText += `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notifyText}\n`;
          infoText += `üìà –°—Ç–∞—Ç—É—Å: ${status}\n`;

          await bot.editMessageText(infoText, {
            chat_id: chatId,
            message_id: msg.message_id,
            parse_mode: "Markdown",
            reply_markup: getTaskActionsKeyboard(
              userState.trackingId,
              updatedTracking.active
            ),
          });
        }

        // –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await MokkyAPI.saveUserState(userId, { state: STATES.IDLE });
        return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤–æ–≥–æ
      }

      // –°–û–ó–î–ê–ù–ò–ï –Ω–æ–≤–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥)
      else if (userState.state === STATES.SELECTING_NOTIFICATION) {
        await bot.editMessageText("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–≤–∞—Ä...", {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: "Markdown",
        });

        const product = await makeApiRequest(
          userState.article,
          userState.marketplace
        );
        if (!product) {
          await bot.editMessageText(
            "‚ùå **–û—à–∏–±–∫–∞!**\n\n–¢–æ–≤–∞—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            {
              chat_id: chatId,
              message_id: msg.message_id,
              parse_mode: "Markdown",
              reply_markup: getStartKeyboard(),
            }
          );
          await MokkyAPI.saveUserState(userId, { state: STATES.IDLE });
          return;
        }

        // –°–æ–∑–¥–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤ Mokky
        const trackingData = {
          userId: userId,
          article: userState.article,
          marketplace: userState.marketplace,
          periodSeconds: userState.periodSeconds,
          notifyAlways: notifyAlways,
          lastPrice: product.real_price,
          lastCheck: new Date().toISOString(),
          active: true,
          productName: product.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä",
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        };

        const savedTracking = await MokkyAPI.createTracking(trackingData);
        if (!savedTracking) {
          await bot.editMessageText("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", {
            chat_id: chatId,
            message_id: msg.message_id,
            reply_markup: getStartKeyboard(),
          });
          return;
        }

        const mpInfo = MARKETPLACES[userState.marketplace];
        const periodInfo = PERIODS[userState.period];
        const notifyText = notifyAlways
          ? "–≤—Å–µ–≥–¥–∞"
          : "—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã";

        const successText =
          `‚úÖ **–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!**\n\n` +
          `üì¶ –¢–æ–≤–∞—Ä: ${product.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"}\n` +
          `üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: ${mpInfo.emoji} ${mpInfo.name}\n` +
          `üìã –ê—Ä—Ç–∏–∫—É–ª: \`${userState.article}\`\n` +
          `‚è±Ô∏è –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${periodInfo.name}\n` +
          `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notifyText}\n` +
          `üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: **${formatPrice(product.real_price || 0)}**\n\n` +
          `üöÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!`;

        await bot.editMessageText(successText, {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: "Markdown",
          reply_markup: getStartKeyboard(),
        });

        await MokkyAPI.saveUserState(userId, { state: STATES.IDLE });
      } else {
        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        await MokkyAPI.saveUserState(userId, { state: STATES.IDLE });
        await bot.editMessageText("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
          chat_id: chatId,
          message_id: msg.message_id,
          reply_markup: getStartKeyboard(),
        });
      }
    }
    // –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π
    else if (data === "list_tracking") {
      const keyboard = await getTrackingListKeyboard(userId);
      await bot.editMessageText(
        "üìã **–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: "Markdown",
          reply_markup: keyboard,
        }
      );
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è–º–∏
    else if (data === "manage_trackings") {
      await bot.editMessageText(
        "‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: "Markdown",
          reply_markup: getTrackingManagementKeyboard(),
        }
      );
    }

    // –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    else if (data === "start_all" || data === "stop_all") {
      const userTrackings = await MokkyAPI.getUserTrackings(userId);
      const isStart = data === "start_all";
      let count = 0;

      for (const tracking of userTrackings) {
        if (tracking.active !== isStart) {
          await MokkyAPI.updateTracking(tracking.id, {
            active: isStart,
            updatedAt: new Date().toISOString(),
          });
          count++;
        }
      }

      const action = isStart ? "–∑–∞–ø—É—â–µ–Ω–æ" : "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ";
      await bot.editMessageText(`‚úÖ **${count} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π ${action}**`, {
        chat_id: chatId,
        message_id: msg.message_id,
        parse_mode: "Markdown",
        reply_markup: getTrackingManagementKeyboard(),
      });
    } else if (data === "delete_inactive") {
      const userTrackings = await MokkyAPI.getUserTrackings(userId);
      const inactiveTrackings = userTrackings.filter((t) => !t.active);

      for (const tracking of inactiveTrackings) {
        await MokkyAPI.deleteTracking(tracking.id);
      }

      await bot.editMessageText(
        `üóëÔ∏è **–£–¥–∞–ª–µ–Ω–æ ${inactiveTrackings.length} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π**`,
        {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: "Markdown",
          reply_markup: getTrackingManagementKeyboard(),
        }
      );
    } else if (data === "delete_all") {
      const userTrackings = await MokkyAPI.getUserTrackings(userId);

      for (const tracking of userTrackings) {
        await MokkyAPI.deleteTracking(tracking.id);
      }

      await bot.editMessageText(
        `üßπ **–í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã (${userTrackings.length})**`,
        {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: "Markdown",
          reply_markup: getStartKeyboard(),
        }
      );
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏
    else if (data.startsWith("task_info_")) {
      const trackingId = data.replace("task_info_", "");
      const tracking = await MokkyAPI.getTracking(trackingId);

      if (!tracking) {
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
        });
        return;
      }

      const mpInfo = MARKETPLACES[tracking.marketplace];
      const periodName =
        Object.values(PERIODS).find((p) => p.seconds === tracking.periodSeconds)
          ?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
      const notifyText = tracking.notifyAlways
        ? "–≤—Å–µ–≥–¥–∞"
        : "—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã";
      const status = tracking.active ? "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" : "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ";

      let infoText = `üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏**\n\n`;
      infoText += `üì¶ –¢–æ–≤–∞—Ä: ${tracking.productName}\n`;
      infoText += `üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: ${mpInfo.emoji} ${mpInfo.name}\n`;
      infoText += `üìã –ê—Ä—Ç–∏–∫—É–ª: \`${tracking.article}\`\n`;
      infoText += `‚è±Ô∏è –ü–µ—Ä–∏–æ–¥: ${periodName}\n`;
      infoText += `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notifyText}\n`;
      infoText += `üìà –°—Ç–∞—Ç—É—Å: ${status}\n`;

      if (tracking.lastPrice) {
        infoText += `üí∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: **${formatPrice(
          tracking.lastPrice
        )}**\n`;
      }

      if (tracking.lastCheck) {
        infoText += `üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${new Date(
          tracking.lastCheck
        ).toLocaleString("ru-RU")}\n`;
      }

      infoText += `üìÖ –°–æ–∑–¥–∞–Ω–æ: ${new Date(tracking.createdAt).toLocaleString(
        "ru-RU"
      )}\n`;

      await bot.editMessageText(infoText, {
        chat_id: chatId,
        message_id: msg.message_id,
        parse_mode: "Markdown",
        reply_markup: getTaskActionsKeyboard(trackingId, tracking.active),
      });
    }

    // –î–µ–π—Å—Ç–≤–∏—è —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è–º–∏
    else if (
      data.startsWith("stop_") ||
      data.startsWith("start_") ||
      data.startsWith("delete_") ||
      data.startsWith("check_")
    ) {
      const [action, trackingId] = data.split("_");
      const tracking = await MokkyAPI.getTracking(trackingId);

      if (!tracking) {
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
        });
        return;
      }

      if (action === "stop") {
        await MokkyAPI.updateTracking(trackingId, {
          active: false,
          updatedAt: new Date().toISOString(),
        });
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "‚è∏Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
        });
      } else if (action === "start") {
        await MokkyAPI.updateTracking(trackingId, {
          active: true,
          updatedAt: new Date().toISOString(),
        });
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "‚ñ∂Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ",
        });
      } else if (action === "delete") {
        await MokkyAPI.deleteTracking(trackingId);
        await bot.editMessageText("üóëÔ∏è **–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ**", {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: "Markdown",
          reply_markup: getStartKeyboard(),
        });
        return;
      } else if (action === "check") {
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–≤–∞—Ä...",
        });
        const product = await makeApiRequest(
          tracking.article,
          tracking.marketplace
        );
        if (product) {
          const infoText = `üîç **–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n\n${formatProductInfo(
            product
          )}`;
          await bot.sendMessage(chatId, infoText, { parse_mode: "Markdown" });

          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
          await MokkyAPI.updateTracking(trackingId, {
            lastPrice: product.real_price,
            lastCheck: new Date().toISOString(),
            productName: product.name || tracking.productName,
            updatedAt: new Date().toISOString(),
          });
        } else {
          await bot.sendMessage(
            chatId,
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"
          );
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –¥–ª—è stop/start
      if (action === "stop" || action === "start") {
        const updatedTracking = await MokkyAPI.getTracking(trackingId);
        if (updatedTracking) {
          const mpInfo = MARKETPLACES[updatedTracking.marketplace];
          const periodName =
            Object.values(PERIODS).find(
              (p) => p.seconds === updatedTracking.periodSeconds
            )?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
          const notifyText = updatedTracking.notifyAlways
            ? "–≤—Å–µ–≥–¥–∞"
            : "—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã";
          const status = updatedTracking.active
            ? "üü¢ –ê–∫—Ç–∏–≤–Ω–æ"
            : "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ";

          let infoText = `üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏**\n\n`;
          infoText += `üì¶ –¢–æ–≤–∞—Ä: ${updatedTracking.productName}\n`;
          infoText += `üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: ${mpInfo.emoji} ${mpInfo.name}\n`;
          infoText += `üìã –ê—Ä—Ç–∏–∫—É–ª: \`${updatedTracking.article}\`\n`;
          infoText += `‚è±Ô∏è –ü–µ—Ä–∏–æ–¥: ${periodName}\n`;
          infoText += `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notifyText}\n`;
          infoText += `üìà –°—Ç–∞—Ç—É—Å: ${status}\n`;

          if (updatedTracking.lastPrice) {
            infoText += `üí∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: **${formatPrice(
              updatedTracking.lastPrice
            )}**\n`;
          }

          if (updatedTracking.lastCheck) {
            infoText += `üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${new Date(
              updatedTracking.lastCheck
            ).toLocaleString("ru-RU")}\n`;
          }

          infoText += `üìÖ –°–æ–∑–¥–∞–Ω–æ: ${new Date(
            updatedTracking.createdAt
          ).toLocaleString("ru-RU")}\n`;

          await bot.editMessageText(infoText, {
            chat_id: chatId,
            message_id: msg.message_id,
            parse_mode: "Markdown",
            reply_markup: getTaskActionsKeyboard(
              trackingId,
              updatedTracking.active
            ),
          });
        }
      }
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    else if (data === "statistics") {
      const userTrackings = await MokkyAPI.getUserTrackings(userId);
      const activeCount = userTrackings.filter((t) => t.active).length;
      const inactiveCount = userTrackings.length - activeCount;

      const marketplaceStats = {};
      userTrackings.forEach((t) => {
        marketplaceStats[t.marketplace] =
          (marketplaceStats[t.marketplace] || 0) + 1;
      });

      let statsText = `üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n`;
      statsText += `üìã –í—Å–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π: **${userTrackings.length}**\n`;
      statsText += `üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: **${activeCount}**\n`;
      statsText += `üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: **${inactiveCount}**\n\n`;

      if (Object.keys(marketplaceStats).length > 0) {
        statsText += `üìà **–ü–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º:**\n`;
        for (const [mp, count] of Object.entries(marketplaceStats)) {
          const mpInfo = MARKETPLACES[mp] || { emoji: "‚ùì", name: "Unknown" };
          statsText += `${mpInfo.emoji} ${mpInfo.name}: ${count}\n`;
        }
      }

      if (userTrackings.length > 0) {
        const oldestTracking = userTrackings.reduce((oldest, current) =>
          new Date(current.createdAt) < new Date(oldest.createdAt)
            ? current
            : oldest
        );
        statsText += `\nüìÖ –ü–µ—Ä–≤–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: ${new Date(
          oldestTracking.createdAt
        ).toLocaleDateString("ru-RU")}`;
      }

      await bot.editMessageText(statsText, {
        chat_id: chatId,
        message_id: msg.message_id,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_main" }],
          ],
        },
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    else if (data.startsWith("edit_notify_")) {
      const trackingId = data.replace("edit_notify_", "");
      const tracking = await MokkyAPI.getTracking(trackingId);

      if (!tracking) {
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
        });
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      await MokkyAPI.saveUserState(userId, {
        state: STATES.EDITING_NOTIFY,
        trackingId: trackingId,
      });

      const mpInfo = MARKETPLACES[tracking.marketplace];
      const currentNotify = tracking.notifyAlways
        ? "üì¢ –í—Å–µ–≥–¥–∞ —É–≤–µ–¥–æ–º–ª—è—Ç—å"
        : "üîî –¢–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã";

      await bot.editMessageText(
        `üì¶ –¢–æ–≤–∞—Ä: ${tracking.productName}\nüè™ ${mpInfo.emoji} ${mpInfo.name}\n\nüîî –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${currentNotify}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:`,
        {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: "Markdown",
          reply_markup: getNotificationKeyboard(),
        }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    else if (data === "notify_changes" || data === "notify_always") {
      const notifyAlways = data === "notify_always";
      const userState = await MokkyAPI.getUserState(userId);

      // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      if (userState.state === STATES.EDITING_NOTIFY && userState.trackingId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await MokkyAPI.updateTracking(userState.trackingId, {
          notifyAlways: notifyAlways,
          updatedAt: new Date().toISOString(),
        });

        const notifyText = notifyAlways
          ? "–≤—Å–µ–≥–¥–∞"
          : "—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã";

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        const updatedTracking = await MokkyAPI.getTracking(
          userState.trackingId
        );
        if (updatedTracking) {
          const mpInfo = MARKETPLACES[updatedTracking.marketplace];
          const periodName =
            Object.values(PERIODS).find(
              (p) => p.seconds === updatedTracking.periodSeconds
            )?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
          const status = updatedTracking.active
            ? "üü¢ –ê–∫—Ç–∏–≤–Ω–æ"
            : "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ";

          let infoText = `‚úÖ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**\n\n`;
          infoText += `üì¶ –¢–æ–≤–∞—Ä: ${updatedTracking.productName}\n`;
          infoText += `üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: ${mpInfo.emoji} ${mpInfo.name}\n`;
          infoText += `üìã –ê—Ä—Ç–∏–∫—É–ª: \`${updatedTracking.article}\`\n`;
          infoText += `‚è±Ô∏è –ü–µ—Ä–∏–æ–¥: ${periodName}\n`;
          infoText += `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notifyText}\n`;
          infoText += `üìà –°—Ç–∞—Ç—É—Å: ${status}\n`;

          await bot.editMessageText(infoText, {
            chat_id: chatId,
            message_id: msg.message_id,
            parse_mode: "Markdown",
            reply_markup: getTaskActionsKeyboard(
              userState.trackingId,
              updatedTracking.active
            ),
          });
        }

        await MokkyAPI.saveUserState(userId, { state: STATES.IDLE });
        return;
      }

      // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      await bot.editMessageText("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–≤–∞—Ä...", {
        chat_id: chatId,
        message_id: msg.message_id,
        parse_mode: "Markdown",
      });

      const product = await makeApiRequest(
        userState.article,
        userState.marketplace
      );
      if (!product) {
        await bot.editMessageText(
          "‚ùå **–û—à–∏–±–∫–∞!**\n\n–¢–æ–≤–∞—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
          {
            chat_id: chatId,
            message_id: msg.message_id,
            parse_mode: "Markdown",
            reply_markup: getStartKeyboard(),
          }
        );
        await MokkyAPI.saveUserState(userId, { state: STATES.IDLE });
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤ Mokky
      const trackingData = {
        userId: userId,
        article: userState.article,
        marketplace: userState.marketplace,
        periodSeconds: userState.periodSeconds,
        notifyAlways: notifyAlways,
        lastPrice: product.real_price,
        lastCheck: new Date().toISOString(),
        active: true,
        productName: product.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä",
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      };

      const savedTracking = await MokkyAPI.createTracking(trackingData);
      if (!savedTracking) {
        await bot.editMessageText("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", {
          chat_id: chatId,
          message_id: msg.message_id,
          reply_markup: getStartKeyboard(),
        });
        return;
      }

      const mpInfo = MARKETPLACES[userState.marketplace];
      const periodInfo = PERIODS[userState.period];
      const notifyText = notifyAlways ? "–≤—Å–µ–≥–¥–∞" : "—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã";

      const successText =
        `‚úÖ **–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!**\n\n` +
        `üì¶ –¢–æ–≤–∞—Ä: ${product.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"}\n` +
        `üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: ${mpInfo.emoji} ${mpInfo.name}\n` +
        `üìã –ê—Ä—Ç–∏–∫—É–ª: \`${userState.article}\`\n` +
        `‚è±Ô∏è –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${periodInfo.name}\n` +
        `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notifyText}\n` +
        `üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: **${formatPrice(product.real_price || 0)}**\n\n` +
        `üöÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!`;

      await bot.editMessageText(successText, {
        chat_id: chatId,
        message_id: msg.message_id,
        parse_mode: "Markdown",
        reply_markup: getStartKeyboard(),
      });

      await MokkyAPI.saveUserState(userId, { state: STATES.IDLE });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    else if (data === "settings") {
      await bot.editMessageText(
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: "Markdown",
          reply_markup: getSettingsKeyboard(),
        }
      );
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    else if (data === "export_data") {
      const userTrackings = await MokkyAPI.getUserTrackings(userId);

      if (userTrackings.length === 0) {
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
        });
        return;
      }

      let exportText = `üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π (${new Date().toLocaleString(
        "ru-RU"
      )})\n\n`;

      userTrackings.forEach((tracking, index) => {
        const mpInfo = MARKETPLACES[tracking.marketplace] || {
          emoji: "‚ùì",
          name: "Unknown",
        };
        const status = tracking.active ? "üü¢" : "üî¥";
        const periodName =
          Object.values(PERIODS).find(
            (p) => p.seconds === tracking.periodSeconds
          )?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

        exportText += `${index + 1}. ${status} ${mpInfo.emoji} ${
          tracking.productName
        }\n`;
        exportText += `   –ê—Ä—Ç–∏–∫—É–ª: ${tracking.article}\n`;
        exportText += `   –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: ${mpInfo.name}\n`;
        exportText += `   –ü–µ—Ä–∏–æ–¥: ${periodName}\n`;
        exportText += `   –¶–µ–Ω–∞: ${
          tracking.lastPrice ? formatPrice(tracking.lastPrice) : "N/A"
        }\n`;
        exportText += `   –°–æ–∑–¥–∞–Ω–æ: ${new Date(
          tracking.createdAt
        ).toLocaleDateString("ru-RU")}\n\n`;
      });

      await bot.sendMessage(chatId, exportText);
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "üì§ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã",
      });
    }

    // –°–ø—Ä–∞–≤–∫–∞
    else if (data === "help") {
      const helpText = `‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

**üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**

**‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ**
1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
3Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏
4Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

**üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è–º–∏**
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
‚Ä¢ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π

**‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏**
‚Ä¢ üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ üîî –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ üì± –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏

**‚è∞ –ü–µ—Ä–∏–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:**
–û—Ç 10 —Å–µ–∫—É–Ω–¥ –¥–æ 12 —á–∞—Å–æ–≤

**üîî –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**
‚Ä¢ **–¢–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏** - —ç–∫–æ–Ω–æ–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫
‚Ä¢ **–í—Å–µ–≥–¥–∞ —É–≤–µ–¥–æ–º–ª—è—Ç—å** - –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å

**üè™ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã:**
üü£ Wildberries
üîµ Ozon

**üí° –°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è

**üíÅ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?**
‚Ä¢ –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!
`;

      await bot.editMessageText(helpText, {
        chat_id: chatId,
        message_id: msg.message_id,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üë®üíª –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É",
                url: "https://t.me/sult987",
              },
            ],
            [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_main" }],
          ],
        },
      });
    }

    // –û—Ç–º–µ–Ω–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    else if (data === "cancel" || data === "back_to_main") {
      await MokkyAPI.saveUserState(userId, { state: STATES.IDLE });
      const text = `ü§ñ **–ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

      await bot.editMessageText(text, {
        chat_id: chatId,
        message_id: msg.message_id,
        parse_mode: "Markdown",
        reply_markup: getStartKeyboard(),
      });
    }
  } catch (error) {
    console.error("Error handling callback query:", error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", async (msg) => {
  if (msg.text && msg.text.startsWith("/")) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã

  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text?.trim();
  const userState = await MokkyAPI.getUserState(userId);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  switch (text) {
    case "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
      await bot.sendMessage(
        chatId,
        "üì¶ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è**\n\n–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:\n\nüí° –ù–µ –∑–Ω–∞–µ—Ç–µ –∞—Ä—Ç–∏–∫—É–ª? –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–æ—Ç–æ–º –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤!",
        {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä",
                  url: "https://t.me/search_wb_ozon_bot",
                },
              ],
              [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
            ],
          },
        }
      );
      await MokkyAPI.saveUserState(userId, { state: STATES.WAITING_ARTICLE });
      return;

    case "üìã –ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è":
      const keyboard = await getTrackingListKeyboard(userId);
      await bot.sendMessage(
        chatId,
        "üìã **–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        {
          parse_mode: "Markdown",
          reply_markup: keyboard,
        }
      );
      return;

    case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
      const userTrackings = await MokkyAPI.getUserTrackings(userId);
      const activeCount = userTrackings.filter((t) => t.active).length;
      const inactiveCount = userTrackings.length - activeCount;

      let statsText = `üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n`;
      statsText += `üìã –í—Å–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π: **${userTrackings.length}**\n`;
      statsText += `üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: **${activeCount}**\n`;
      statsText += `üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: **${inactiveCount}**`;

      await bot.sendMessage(chatId, statsText, {
        parse_mode: "Markdown",
        reply_markup: getStartKeyboard(),
      });
      return;

    case "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä":
      await bot.sendMessage(
        chatId,
        "üîç **–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤**\n\n–î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–∞–ª–æ–≥–∞–º Wildberries –∏ Ozon –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç.\n\n–í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä, —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å—é–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!",
        {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üîç –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç –ø–æ–∏—Å–∫–∞",
                  url: "https://t.me/search_wb_ozon_bot",
                },
              ],
            ],
          },
        }
      );
      return;

    case "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
      await bot.sendMessage(
        chatId,
        "‚ÑπÔ∏è **–ü–æ–º–æ—â—å**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.",
        {
          parse_mode: "Markdown",
          reply_markup: getStartKeyboard(),
        }
      );
      return;

    case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
      await bot.sendMessage(
        chatId,
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        {
          parse_mode: "Markdown",
          reply_markup: getSettingsKeyboard(),
        }
      );
      return;
  }

  // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
  if (!userState || userState.state !== STATES.WAITING_ARTICLE) return;

  const article = text;
  userState.article = article;
  userState.state = STATES.SELECTING_MARKETPLACE;
  await MokkyAPI.saveUserState(userId, userState);

  await bot.sendMessage(
    chatId,
    `üì¶ –ê—Ä—Ç–∏–∫—É–ª: \`${article}\`\n\nüè™ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:`,
    {
      parse_mode: "Markdown",
      reply_markup: getMarketplaceKeyboard(),
    }
  );
});

// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω
async function priceCheckingLoop() {
  while (true) {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑ Mokky
      const allActiveTrackings = await MokkyAPI.getAllActiveTrackings();
      const currentTime = new Date();
      const tasksToCheck = [];

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
      for (const tracking of allActiveTrackings) {
        if (!tracking.active) continue;

        if (!tracking.lastCheck) {
          tasksToCheck.push(tracking);
          continue;
        }

        const lastCheck = new Date(tracking.lastCheck);
        const timeDiff = (currentTime - lastCheck) / 1000;
        if (timeDiff >= tracking.periodSeconds) {
          tasksToCheck.push(tracking);
        }
      }

      console.log(`Checking ${tasksToCheck.length} trackings...`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É
      for (const tracking of tasksToCheck) {
        try {
          const product = await makeApiRequest(
            tracking.article,
            tracking.marketplace
          );
          if (!product) {
            console.log(
              `Product not found: ${tracking.article} on ${tracking.marketplace}`
            );
            continue;
          }

          const currentPrice = product.real_price || 0;
          const priceChanged =
            tracking.lastPrice === null || tracking.lastPrice !== currentPrice;

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          const shouldNotify =
            tracking.notifyAlways || (!tracking.notifyAlways && priceChanged);

          if (shouldNotify) {
            let messageText = "";

            if (priceChanged && tracking.lastPrice !== null) {
              if (currentPrice > tracking.lastPrice) {
                messageText += "üìà **–¶–ï–ù–ê –í–´–†–û–°–õ–ê!**\n\n";
                messageText += `–ë—ã–ª–æ: **${formatPrice(tracking.lastPrice)}**\n`;
                messageText += `–°—Ç–∞–ª–æ: **${formatPrice(currentPrice)}**\n`;
                messageText += `–†–∞–∑–Ω–∏—Ü–∞: +${formatPrice(
                  currentPrice - tracking.lastPrice
                )}\n\n`;
              } else {
                messageText += "üìâ **–¶–ï–ù–ê –£–ü–ê–õ–ê!**\n\n";
                messageText += `–ë—ã–ª–æ: **${formatPrice(tracking.lastPrice)}**\n`;
                messageText += `–°—Ç–∞–ª–æ: **${formatPrice(currentPrice)}**\n`;
                messageText += `–†–∞–∑–Ω–∏—Ü–∞: -${formatPrice(
                  tracking.lastPrice - currentPrice
                )}\n\n`;
              }
            } else if (!priceChanged) {
              messageText += "üìä **–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ**\n\n";
            }

            messageText += formatProductInfo(product);

            try {
              await bot.sendMessage(tracking.userId, messageText, {
                parse_mode: "Markdown",
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: "üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ",
                        callback_data: `task_info_${tracking.id}`,
                      },
                      {
                        text: "üìã –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
                        callback_data: "list_tracking",
                      },
                    ],
                  ],
                },
              });
            } catch (error) {
              console.error(
                `Error sending message to user ${tracking.userId}:`,
                error.message
              );
            }
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –≤ Mokky
          await MokkyAPI.updateTracking(tracking.id, {
            lastPrice: currentPrice,
            lastCheck: currentTime.toISOString(),
            productName: product.name || tracking.productName,
            updatedAt: currentTime.toISOString(),
          });

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API —Ç–æ–≤–∞—Ä–æ–≤
          await new Promise((resolve) => setTimeout(resolve, 1000));
        } catch (error) {
          console.error(
            `Error checking tracking ${tracking.id}:`,
            error.message
          );
        }
      }

      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π (10 —Å–µ–∫—É–Ω–¥)
      await new Promise((resolve) => setTimeout(resolve, 10000));
    } catch (error) {
      console.error("Error in price checking loop:", error.message);
      await new Promise((resolve) => setTimeout(resolve, 30000)); // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  }
}

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.onText(/\/stats/, async (msg) => {
  const userId = msg.from.id;
  const chatId = msg.chat.id;

  const userTrackings = await MokkyAPI.getUserTrackings(userId);
  const activeCount = userTrackings.filter((t) => t.active).length;

  let statsText = `üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n`;
  statsText += `üìã –í—Å–µ–≥–æ: ${userTrackings.length}\n`;
  statsText += `üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeCount}\n`;
  statsText += `üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${userTrackings.length - activeCount}`;

  bot.sendMessage(chatId, statsText, {
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "statistics" },
          { text: "üìã –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data: "list_tracking" },
        ],
      ],
    },
  });
});

bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(
    chatId,
    "‚ÑπÔ∏è **–ü–æ–º–æ—â—å**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.",
    {
      parse_mode: "Markdown",
      reply_markup: getStartKeyboard(),
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on("polling_error", (error) => {
  console.error("Polling error:", error.message);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
async function initialize() {
  console.log("ü§ñ Bot starting...");

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ –∫—ç—à –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  await loadTrackingsToCache();

  console.log("ü§ñ Bot started successfully");

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω
  priceCheckingLoop();
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
initialize();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
process.on("SIGINT", () => {
  console.log("Bot stopping...");
  bot.stopPolling();
  process.exit();
});

process.on("SIGTERM", () => {
  console.log("Bot stopping...");
  bot.stopPolling();
  process.exit();
});
